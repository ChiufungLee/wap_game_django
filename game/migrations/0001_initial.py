# Generated by Django 5.2.1 on 2025-06-19 08:03

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GameCity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': '游戏城市',
            },
        ),
        migrations.CreateModel(
            name='GamePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='页面名称')),
                ('description', models.TextField(blank=True, default='', verbose_name='页面描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('custom_css', models.TextField(blank=True, default='')),
                ('custom_js', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': '游戏页面',
                'verbose_name_plural': '游戏页面',
            },
        ),
        migrations.CreateModel(
            name='Gang',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='帮派名称')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('reputation', models.PositiveIntegerField(default=0, verbose_name='帮派声望')),
                ('money', models.PositiveIntegerField(default=0, verbose_name='帮派资金')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='帮派等级')),
                ('max_count', models.PositiveIntegerField(default=50, verbose_name='人数上限')),
                ('max_exp', models.PositiveIntegerField(default=10000, verbose_name='经验上限')),
                ('exp', models.PositiveIntegerField(default=0, verbose_name='当前经验')),
                ('location', models.CharField(blank=True, default='', max_length=100, verbose_name='所在地')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('params', models.JSONField(blank=True, default=dict, verbose_name='扩展属性')),
                ('icon', models.URLField(blank=True, null=True, verbose_name='图标URL')),
            ],
            options={
                'verbose_name': '帮派',
                'verbose_name_plural': '帮派管理',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='技能名称')),
                ('level', models.PositiveSmallIntegerField(default=1, verbose_name='基础等级')),
                ('description', models.TextField(blank=True, help_text='基础技能描述', verbose_name='技能描述')),
                ('battle_description', models.TextField(blank=True, help_text='战斗中使用时的描述文本，可使用{player}、{target}等占位符', verbose_name='战斗描述')),
            ],
            options={
                'verbose_name': '核心技能',
                'verbose_name_plural': '核心技能',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_id', models.PositiveSmallIntegerField(choices=[(1, '系统'), (2, '世界'), (3, '私聊'), (4, '帮派'), (5, '组队')], db_index=True, verbose_name='类型')),
                ('sender', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, verbose_name='发送者ID')),
                ('sender_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='发送人名称')),
                ('message', models.CharField(blank=True, max_length=256, null=True, verbose_name='消息内容')),
                ('receiver', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, verbose_name='接受者')),
                ('bangpai_id', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True)),
                ('duiwu_id', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'verbose_name': '聊天消息',
                'indexes': [models.Index(fields=['type_id', '-created_at'], name='game_chatme_type_id_02ed22_idx'), models.Index(fields=['bangpai_id', '-created_at'], name='game_chatme_bangpai_a8f917_idx'), models.Index(fields=['sender', 'receiver', '-created_at'], name='game_chatme_sender_78e900_idx')],
            },
        ),
        migrations.CreateModel(
            name='GameEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='事件名称')),
                ('description', models.TextField(blank=True, default='', verbose_name='事件描述')),
                ('category', models.CharField(blank=True, choices=[('player', '玩家操作'), ('item', '物品操作'), ('skill', '技能操作'), ('navigation', '导航操作'), ('system', '系统功能')], default='player', max_length=20, null=True, verbose_name='事件类别')),
                ('function_name', models.CharField(blank=True, choices=[('player_heal', '治疗玩家'), ('player_add_gold', '添加金币'), ('player_teleport', '传送玩家'), ('item_add', '添加物品'), ('item_remove', '移除物品'), ('skill_learn', '学习技能'), ('navigate_page', '跳转页面'), ('system_save', '保存游戏')], max_length=50, null=True, verbose_name='功能函数')),
                ('function_params', models.JSONField(blank=True, null=True, verbose_name='函数参数')),
                ('state_machine_config', models.JSONField(blank=True, null=True, verbose_name='状态机配置')),
                ('success_message', models.TextField(blank=True, default='', verbose_name='成功消息')),
                ('failure_message', models.TextField(blank=True, default='', verbose_name='失败消息')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '游戏事件',
                'verbose_name_plural': '游戏事件',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['category'], name='game_gameev_categor_1cc7d6_idx')],
            },
        ),
        migrations.CreateModel(
            name='GameMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('desc', models.TextField(blank=True, default='')),
                ('is_city', models.BooleanField(default=False, verbose_name='是否城内')),
                ('is_safe_zone', models.BooleanField(default=False, verbose_name='安全区')),
                ('refresh_time', models.IntegerField(default=300, help_text='NPC和物品的刷新间隔', verbose_name='刷新时间(秒)')),
                ('params', models.JSONField(blank=True, default=dict, help_text='存储动态变化的游戏数据', verbose_name='扩展属性')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations', to='game.gamecity', verbose_name='所属城市')),
                ('east', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='west_link', to='game.gamemap', verbose_name='东向连接')),
                ('north', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='south_link', to='game.gamemap', verbose_name='北向连接')),
                ('south', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='north_link', to='game.gamemap', verbose_name='南向连接')),
                ('west', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='east_link', to='game.gamemap', verbose_name='西向连接')),
            ],
            options={
                'verbose_name': '游戏地图',
            },
        ),
        migrations.CreateModel(
            name='GameMapArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('area_type', models.PositiveSmallIntegerField(default=0, help_text='0=普通区域, 1=特殊区域, 2=隐藏区域', verbose_name='区域类型')),
            ],
            options={
                'verbose_name': '地图区域',
                'indexes': [models.Index(fields=['area_type'], name='game_gamema_area_ty_9e5e39_idx')],
            },
        ),
        migrations.AddField(
            model_name='gamecity',
            name='area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='game.gamemaparea', verbose_name='所属区域'),
        ),
        migrations.CreateModel(
            name='GameMapNPC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('npc_id', models.PositiveIntegerField(db_index=True)),
                ('map_id', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('count', models.IntegerField(default=1, verbose_name='数量')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='生成时间')),
                ('next_refresh_time', models.IntegerField(default=3600, verbose_name='下次刷新时间')),
            ],
            options={
                'verbose_name': '地图NPC',
                'indexes': [models.Index(fields=['map_id'], name='game_gamema_map_id_a35f8c_idx'), models.Index(fields=['created_at'], name='game_gamema_created_5ef20e_idx')],
            },
        ),
        migrations.CreateModel(
            name='GameNPC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('npc_type', models.CharField(choices=[('npc', 'NPC'), ('monster', '怪物'), ('quest', '任务NPC'), ('shop', '商店NPC')], max_length=20, verbose_name='类型')),
                ('name', models.CharField(max_length=100, verbose_name='名称')),
                ('description', models.TextField(default='', verbose_name='描述')),
                ('level', models.IntegerField(default=1, verbose_name='等级')),
                ('hp', models.IntegerField(blank=True, null=True, verbose_name='生命值')),
                ('attack', models.IntegerField(blank=True, null=True, verbose_name='攻击力')),
                ('defense', models.IntegerField(blank=True, null=True, verbose_name='防御力')),
                ('exp_reward', models.IntegerField(default=0, verbose_name='经验奖励')),
                ('gold_reward', models.IntegerField(default=0, verbose_name='金钱奖励')),
                ('drop_items', models.JSONField(blank=True, null=True, verbose_name='物品掉落')),
                ('is_boss', models.BooleanField(default=False, verbose_name='是否BOSS')),
                ('dialogue', models.TextField(blank=True, null=True, verbose_name='对话文本')),
                ('shop_items', models.JSONField(blank=True, null=True, verbose_name='出售物品')),
                ('show_conditions', models.JSONField(blank=True, default=dict, help_text='满足条件才显示的JSON配置', verbose_name='显示条件')),
            ],
            options={
                'verbose_name': '游戏NPC',
                'verbose_name_plural': '游戏NPC管理',
                'indexes': [models.Index(fields=['npc_type'], name='game_gamenp_npc_typ_4c29e5_idx')],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='名称')),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='描述')),
                ('category', models.PositiveSmallIntegerField(choices=[(1, '装备'), (2, '药品'), (3, '物品'), (4, '宝石'), (5, '时装'), (6, '其他')], db_index=True, default=3, verbose_name='分类')),
                ('level', models.IntegerField(default=1, verbose_name='等级')),
                ('weight', models.IntegerField(default=1, verbose_name='负重')),
                ('price', models.IntegerField(default=100, verbose_name='价格')),
                ('jiaoyi', models.BooleanField(default=True, verbose_name='可交易')),
                ('zengsong', models.BooleanField(default=True, verbose_name='可赠送')),
                ('duidie', models.BooleanField(default=False, verbose_name='可堆叠')),
                ('attack', models.IntegerField(default=0, verbose_name='攻击')),
                ('defense', models.IntegerField(default=0, verbose_name='防御')),
                ('minjie', models.IntegerField(default=0, verbose_name='敏捷')),
                ('linghunli', models.IntegerField(default=0, verbose_name='灵魂力')),
                ('hp', models.IntegerField(default=0, verbose_name='生命')),
                ('equipment_post', models.PositiveSmallIntegerField(blank=True, choices=[(1, '武器'), (2, '头盔'), (3, '衣服'), (4, '裤子'), (5, '腰带'), (6, '鞋子'), (7, '饰品'), (8, '戒指'), (9, '项链')], default=1, null=True, verbose_name='装备位置')),
                ('set_id', models.IntegerField(db_index=True, default=0, verbose_name='套装ID')),
                ('set_bonus', models.JSONField(blank=True, default=dict, verbose_name='套装加成')),
                ('rank', models.IntegerField(choices=[(1, '一品'), (2, '二品'), (3, '三品'), (4, '四品'), (5, '五品'), (6, '六品'), (7, '七品'), (8, '八品'), (9, '九品')], db_index=True, default=1, verbose_name='品阶')),
                ('max_naijiu', models.IntegerField(blank=True, default=0, null=True, verbose_name='最大耐久')),
                ('is_kaikong', models.BooleanField(default=False, verbose_name='是否可开孔')),
                ('max_kaikong', models.IntegerField(blank=True, default=0, null=True, verbose_name='最大开孔数量')),
                ('max_qianghua', models.IntegerField(default=10, verbose_name='最大强化等级')),
                ('attrs', models.JSONField(blank=True, default=dict, verbose_name='动态属性')),
            ],
            options={
                'verbose_name': '游戏物品',
                'db_table': 'game_items',
                'indexes': [models.Index(fields=['category'], name='game_items_categor_d86b1f_idx'), models.Index(fields=['equipment_post'], name='game_items_equipme_1b970a_idx')],
            },
        ),
        migrations.CreateModel(
            name='GameMapItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_id', models.PositiveIntegerField(blank=True, db_index=True, null=True, verbose_name='所在地图')),
                ('count', models.IntegerField(default=1, verbose_name='数量')),
                ('picked_by', models.PositiveIntegerField(blank=True, null=True, verbose_name='拾取者')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='生成时间')),
                ('expire_time', models.DateTimeField(blank=True, null=True, verbose_name='消失时间')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_item', to='game.item', verbose_name='物品')),
            ],
            options={
                'verbose_name': '地图物品实例',
            },
        ),
        migrations.CreateModel(
            name='NPCDropList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gailv', models.IntegerField(default=1, verbose_name='掉落概率')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='npcdrop', to='game.item', verbose_name='掉落物品')),
                ('npc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='droplist', to='game.gamenpc', verbose_name='NPC')),
            ],
        ),
        migrations.CreateModel(
            name='PageComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_text', models.TextField(blank=True, default='', verbose_name='显示内容')),
                ('show_condition', models.TextField(blank=True, default='', verbose_name='显示条件')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='组件位置')),
                ('component_type', models.CharField(choices=[('text', '文本'), ('function', '操作'), ('input', '输入框'), ('link', '链接')], default='text', max_length=128, verbose_name='组件类型')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='game.gameevent', verbose_name='关联事件')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='game.gamepage', verbose_name='所属页面')),
            ],
            options={
                'verbose_name': '页面组件',
                'verbose_name_plural': '页面组件',
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.URLField(blank=True, null=True, verbose_name='头像URL')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='名称')),
                ('gender', models.CharField(choices=[('M', '男'), ('F', '女'), ('O', '其他')], max_length=1, verbose_name='性别')),
                ('signature', models.CharField(blank=True, default='', max_length=100, verbose_name='个性签名')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='等级')),
                ('current_exp', models.PositiveBigIntegerField(default=0, verbose_name='当前经验')),
                ('current_hp', models.PositiveIntegerField(default=100, verbose_name='当前生命')),
                ('max_hp', models.PositiveIntegerField(default=100, verbose_name='最大生命')),
                ('min_attack', models.PositiveIntegerField(default=10, verbose_name='最小攻击')),
                ('max_attack', models.PositiveIntegerField(default=20, verbose_name='最大攻击')),
                ('min_defense', models.PositiveIntegerField(default=5, verbose_name='最小防御')),
                ('max_defense', models.PositiveIntegerField(default=10, verbose_name='最大防御')),
                ('agility', models.PositiveIntegerField(default=10, verbose_name='敏捷')),
                ('linghunli', models.PositiveIntegerField(default=0, verbose_name='灵魂力')),
                ('reputation', models.IntegerField(default=0, verbose_name='声望')),
                ('last_active', models.DateTimeField(auto_now=True, verbose_name='最后活动时间')),
                ('is_online', models.BooleanField(default=True, verbose_name='是否在线')),
                ('params', models.JSONField(blank=True, default=dict, verbose_name='动态属性')),
                ('bag_capacity', models.IntegerField(default=100, verbose_name='背包容量')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('gang', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='game.gang', verbose_name='所在帮派')),
                ('map', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='game.gamemap', verbose_name='所在地图')),
                ('marriage', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spouse_of', to='game.player', verbose_name='婚姻关系')),
            ],
            options={
                'verbose_name': '玩家',
                'verbose_name_plural': '玩家管理',
            },
        ),
        migrations.CreateModel(
            name='GangMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('join_date', models.DateTimeField(auto_now_add=True, verbose_name='加入时间')),
                ('position', models.CharField(choices=[('bz', '帮主'), ('fb', '副帮主'), ('zl', '长老'), ('hf', '护法'), ('cy', '成员')], default='cy', max_length=20, verbose_name='职位')),
                ('contribution', models.PositiveIntegerField(default=0, verbose_name='贡献值')),
                ('gang', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gang_members', to='game.gang')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player', to='game.player')),
            ],
            options={
                'verbose_name': '帮派成员',
                'verbose_name_plural': '帮派成员',
            },
        ),
        migrations.CreateModel(
            name='GangApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applied_time', models.DateTimeField(auto_now_add=True, verbose_name='申请时间')),
                ('status', models.CharField(choices=[('pending', '审核中'), ('accepted', '已通过'), ('rejected', '已拒绝'), ('revoked', '已撤回')], default='pending', max_length=20, verbose_name='状态')),
                ('gang', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='game.gang')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gang_applications', to='game.player')),
            ],
            options={
                'verbose_name': '帮派申请',
                'verbose_name_plural': '帮派申请',
            },
        ),
        migrations.AddField(
            model_name='gang',
            name='leader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leading_gang', to='game.player', verbose_name='帮主'),
        ),
        migrations.CreateModel(
            name='PlayerItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.PositiveSmallIntegerField(choices=[(1, '装备'), (2, '药品'), (3, '物品'), (4, '宝石'), (5, '时装'), (6, '其他')], db_index=True, default=3, verbose_name='物品类型')),
                ('equipment_post', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='装备位置')),
                ('count', models.IntegerField(default=1)),
                ('is_bound', models.BooleanField(default=False)),
                ('is_equipped', models.BooleanField(db_index=True, default=False)),
                ('hp', models.IntegerField(default=0, verbose_name='生命')),
                ('attack', models.IntegerField(default=0, verbose_name='攻击')),
                ('defense', models.IntegerField(default=0, verbose_name='防御')),
                ('minjie', models.IntegerField(default=0, verbose_name='敏捷')),
                ('linghunli', models.IntegerField(default=0, verbose_name='灵魂力')),
                ('naijiu', models.IntegerField(blank=True, null=True)),
                ('qianghua_level', models.IntegerField(default=0)),
                ('kaikong_count', models.IntegerField(blank=True, default=0, null=True, verbose_name='开孔数量')),
                ('baoshi', models.JSONField(blank=True, default=list)),
                ('expiration_time', models.DateTimeField(blank=True, null=True)),
                ('attrs', models.JSONField(blank=True, default=dict)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.item')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='game.player')),
            ],
            options={
                'verbose_name': '玩家物品',
                'db_table': 'game_player_item',
            },
        ),
        migrations.CreateModel(
            name='PlayerEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveSmallIntegerField(choices=[(1, '武器'), (2, '头盔'), (3, '衣服'), (4, '裤子'), (5, '腰带'), (6, '鞋子'), (7, '饰品'), (8, '戒指'), (9, '项链')], db_index=True, default=1)),
                ('hp', models.IntegerField(default=0, verbose_name='生命')),
                ('attack', models.IntegerField(default=0, verbose_name='攻击')),
                ('defense', models.IntegerField(default=0, verbose_name='防御')),
                ('minjie', models.IntegerField(default=0, verbose_name='敏捷')),
                ('linghunli', models.IntegerField(default=0, verbose_name='灵魂力')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipments', to='game.player')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='equipped_in', to='game.playeritem')),
            ],
            options={
                'verbose_name': '玩家装备',
                'verbose_name_plural': '玩家装备',
                'db_table': 'game_player_equipment',
            },
        ),
        migrations.CreateModel(
            name='QuickSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_id', models.BigIntegerField(db_index=True, verbose_name='玩家ID')),
                ('slot_index', models.PositiveSmallIntegerField(verbose_name='快捷键位置')),
                ('skill_id', models.BigIntegerField(blank=True, null=True, verbose_name='技能ID')),
                ('item_id', models.BigIntegerField(blank=True, null=True, verbose_name='物品ID')),
            ],
            options={
                'verbose_name': '玩家快捷键',
                'verbose_name_plural': '玩家快捷键',
                'ordering': ['player_id', 'slot_index'],
                'indexes': [models.Index(fields=['player_id'], name='game_quicks_player__3a8bd3_idx')],
                'unique_together': {('player_id', 'slot_index')},
            },
        ),
        migrations.CreateModel(
            name='PlayerSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_level', models.PositiveSmallIntegerField(default=1, verbose_name='当前等级')),
                ('current_xp', models.PositiveIntegerField(default=0, verbose_name='当前经验值')),
                ('max_xp', models.PositiveIntegerField(default=0, verbose_name='最大经验值')),
                ('attack', models.SmallIntegerField(default=20, verbose_name='攻击加成')),
                ('defense', models.SmallIntegerField(default=5, verbose_name='防御加成')),
                ('linghunli', models.SmallIntegerField(default=2, verbose_name='灵魂力消耗')),
                ('douqi', models.SmallIntegerField(default=5, verbose_name='斗气消耗')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='game.player', verbose_name='玩家')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playerskills', to='game.skill', verbose_name='关联技能')),
            ],
            options={
                'verbose_name': '玩家技能',
                'verbose_name_plural': '玩家技能',
            },
        ),
        migrations.CreateModel(
            name='GameBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='游戏名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='游戏介绍')),
                ('status', models.CharField(choices=[('kfz', '开发中'), ('whz', '维护中'), ('nc', '内测种'), ('gc', '公测中'), ('zs', '正式上线'), ('other', '其他')], default='kfz', max_length=20, verbose_name='游戏状态')),
                ('version', models.CharField(default='0.1.0', max_length=20, verbose_name='游戏版本')),
                ('updated_at', models.DateTimeField(auto_now_add=True, verbose_name='更新时间')),
                ('huobi', models.CharField(default='金币', max_length=50, verbose_name='默认货币')),
                ('config_params', models.JSONField(blank=True, default=dict, verbose_name='游戏配置参数')),
                ('default_map', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='start_map', to='game.gamemap', verbose_name='默认地图入口')),
                ('default_skill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_skill', to='game.skill', verbose_name='人物初始技能')),
            ],
            options={
                'verbose_name': '游戏基础属性',
                'verbose_name_plural': '游戏基础属性',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='队伍名称')),
                ('max_size', models.PositiveSmallIntegerField(default=5, verbose_name='最大人数')),
                ('need_approval', models.BooleanField(default=False, verbose_name='是否需要审批')),
                ('leader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leading_teams', to='game.player', verbose_name='队长')),
            ],
            options={
                'verbose_name': '队伍',
                'verbose_name_plural': '队伍管理',
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('join_time', models.DateTimeField(auto_now_add=True, verbose_name='加入时间')),
                ('is_leader', models.BooleanField(default=False, verbose_name='是否队长')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_memberships', to='game.player', verbose_name='玩家')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='game.team', verbose_name='队伍')),
            ],
            options={
                'verbose_name': '队伍成员',
                'verbose_name_plural': '队伍成员',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=32, unique=True, verbose_name='用户名')),
                ('password', models.CharField(max_length=128, verbose_name='密码')),
                ('email', models.EmailField(blank=True, max_length=64, null=True, verbose_name='邮箱')),
                ('phone', models.CharField(blank=True, max_length=32, null=True, verbose_name='手机号')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(0, '管理员'), (1, '普通用户'), (2, 'VIP用户')], default=1, verbose_name='用户类型')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, '正常'), (1, '禁用'), (2, '待验证')], default=0, verbose_name='用户状态')),
                ('security_code', models.CharField(max_length=8, verbose_name='安全码')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='最近登录IP')),
                ('last_login_at', models.DateTimeField(blank=True, null=True, verbose_name='最近登录时间')),
                ('failed_attempts', models.PositiveSmallIntegerField(default=0, verbose_name='登录失败次数')),
                ('params', models.JSONField(default=dict, verbose_name='扩展属性')),
            ],
            options={
                'verbose_name': '游戏用户',
                'db_table': 'game_user',
                'indexes': [models.Index(fields=['username'], name='game_user_usernam_2883f6_idx'), models.Index(fields=['last_login_ip'], name='game_user_last_lo_6a9d59_idx')],
            },
        ),
        migrations.AddField(
            model_name='player',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='players', to='game.user', verbose_name='关联用户'),
        ),
        migrations.CreateModel(
            name='HeCheng',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_materials', models.JSONField(blank=True, default=dict, help_text="所需材料: {'item_id1':5, 'item_id2':3}", verbose_name='所需材料')),
                ('success_rate', models.PositiveSmallIntegerField(default=80, help_text='成功率%')),
                ('item', models.OneToOneField(blank=True, help_text='图纸物品', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hecheng', to='game.item')),
                ('result_item', models.ForeignKey(help_text='产出的装备', on_delete=django.db.models.deletion.CASCADE, related_name='blueprints', to='game.item')),
                ('forger', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='forging_records', to='game.user', verbose_name='锻造师')),
            ],
        ),
        migrations.AddIndex(
            model_name='gamemap',
            index=models.Index(fields=['is_safe_zone'], name='game_gamema_is_safe_585ff5_idx'),
        ),
        migrations.AddIndex(
            model_name='gamemap',
            index=models.Index(fields=['is_city'], name='game_gamema_is_city_6af311_idx'),
        ),
        migrations.AddIndex(
            model_name='gamemapitem',
            index=models.Index(fields=['map_id'], name='game_gamema_map_id_877c0c_idx'),
        ),
        migrations.AddIndex(
            model_name='gamemapitem',
            index=models.Index(fields=['expire_time'], name='game_gamema_expire__d1b446_idx'),
        ),
        migrations.AddIndex(
            model_name='pagecomponent',
            index=models.Index(fields=['page'], name='game_pageco_page_id_408228_idx'),
        ),
        migrations.AddIndex(
            model_name='pagecomponent',
            index=models.Index(fields=['event'], name='game_pageco_event_i_51aa98_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='gangmember',
            unique_together={('player', 'gang')},
        ),
        migrations.AddIndex(
            model_name='playeritem',
            index=models.Index(fields=['player', 'is_equipped'], name='game_player_player__3c5c5c_idx'),
        ),
        migrations.AddIndex(
            model_name='playeritem',
            index=models.Index(fields=['item', 'is_bound'], name='game_player_item_id_a71caa_idx'),
        ),
        migrations.AddIndex(
            model_name='playeritem',
            index=models.Index(fields=['player', 'category'], name='game_player_player__2e0910_idx'),
        ),
        migrations.AddIndex(
            model_name='playerequipment',
            index=models.Index(fields=['player', 'position'], name='game_player_player__c06b28_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playerequipment',
            unique_together={('player', 'position')},
        ),
        migrations.AddIndex(
            model_name='playerskill',
            index=models.Index(fields=['player', 'current_level'], name='game_player_player__07076a_idx'),
        ),
        migrations.AddIndex(
            model_name='playerskill',
            index=models.Index(fields=['attack', 'defense'], name='game_player_attack_beae48_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teammember',
            unique_together={('player', 'team')},
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['name'], name='game_player_name_13b648_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['level'], name='game_player_level_86a0f4_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['last_active'], name='game_player_last_ac_a4203a_idx'),
        ),
    ]
